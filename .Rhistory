rm(list=ls())
library("caret")
setwd("/Users/vitiok/University/IS/assignment_2")
nrOfFolds <- 5
data <- read.csv(file="hormigon.csv", header=TRUE, sep=",")
partitions <- createMultiFolds(y=data[, 1], k=nrOfFolds, 1)
trainingData_1_Indexes <- partitions$Fold1.Rep1;
indexesOfInitialData <- c(1:length(data[, 1]))
testData_1_Indexes <- indexesOfInitialData[is.na(pmatch(indexesOfInitialData, trainingData_1_Indexes))]
trainingData_1 <- data[trainingData_1_Indexes, ];
testData_1 <- data[testData_1_Indexes, ];
factors <- c(names(data));
factors
linearModelFormula <- as.formula(paste("y~", paste(factors, collapse="+")));
linearModelFormula
linearModel <- lm(linearModelFormula, trainingData_1);
linearModelFormula <- as.formula(paste("y~", paste(factors, collapse="+")));
linearModel <- lm(linearModelFormula, trainingData_1);
factors <- c(names(data));
linearModelFormula <- as.formula(paste("strength~", paste(factors, collapse="+")));
linearModel <- lm(linearModelFormula, trainingData_1);
trainingData_1
trainingData_1[1]
trainingData_1[, 1]
testData_1 <- data[testData_1_Indexes, ];
trainingData_1 <- data[trainingData_1_Indexes, ];
testData_1 <- data[testData_1_Indexes, ];
factors <- c(names(data));
linearModelFormula <- as.formula(paste("y~", paste(factors, collapse="+")));
linearModel <- lm(linearModelFormula, trainingData_1);
names(data)
trainingData_1 <- data[trainingData_1_Indexes, ];
testData_1 <- data[testData_1_Indexes, ];
factors <- c(names(data));
linearModelFormula <- as.formula(paste("strength ~", paste(factors, collapse="+")));
linearModel <- lm(linearModelFormula, trainingData_1);
names(trainingData_1)
linearModelFormula
linearModel
typeof(linearModel)
factors
factors[9]
factors <- c(names(data));
factors <- factors[-9];
factors
linearModelFormula <- as.formula(paste("strength ~", paste(factors, collapse="+")));
linearModel <- lm(linearModelFormula, trainingData_1);
linearModel
factors <- c(names(data));
factors <- factors["strength"];
factors
factors <- c(names(data));
factors <- factors[factors != "strength"];
factors
factors <- c(names(data));
factors <- factors[factors != "age"];
factors
factors <- c(names(data));
attributeToWorkWith <- "strength";
factors <- factors[factors != attributeToWorkWith];
factors
linearModelFormula <- as.formula(paste("strength ~", paste(factors, collapse="+")));
linearModel <- lm(linearModelFormula, trainingData_1);
linearModel
predict()
predict
predict()
predictionVector <- predict(linearModel, testData_1);
predictionVector
View(data)
meanValue <- mean(abs(predictionVector - testData_1$strength));
meanValue
x <- c(1:10)
mean(x)
1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10
55 / 10
rm(list=ls())
library("caret")
setwd("/Users/vitiok/University/IS/assignment_2")
nrOfFolds <- 5
data <- read.csv(file="hormigon.csv", header=TRUE, sep=",")
partitions <- createMultiFolds(y=data[, 1], k=nrOfFolds, 1)
trainingData_1_Indexes <- partitions$Fold1.Rep1;
indexesOfInitialData <- c(1:length(data[, 1]))
testData_1_Indexes <- indexesOfInitialData[is.na(pmatch(indexesOfInitialData, trainingData_1_Indexes))]
trainingData_1 <- data[trainingData_1_Indexes, ];
testData_1 <- data[testData_1_Indexes, ];
length(trainingData_1[, 1])
length(testData_1[, 1])
factors <- c(names(data));
attributeToWorkWith <- "strength";
factors <- factors[factors != attributeToWorkWith];
linearModelFormula <- as.formula(paste("strength ~", paste(factors, collapse="+")));
linearModel <- lm(linearModelFormula, trainingData_1);
linearModel
predictionVector <- predict(linearModel, testData_1);
predictionVector
meanValue <- mean(abs(predictionVector - testData_1$strength));
meanValue
predictionVector$strength
predictionVector
predictedStrength <- predict(linearModel, testData_1);
predictedStrength
meanValue <- mean(abs(predictedStrength - testData_1$strength));
meanValue
partitions[0]
partitions
for(fold in partitions) {
print(length(fold));
}
for(fold in partitions) {
print(length(fold));
print(fold)
}
rm(list=ls())
library("caret")
setwd("/Users/vitiok/University/IS/assignment_2")
nrOfFolds <- 5
data <- read.csv(file="hormigon.csv", header=TRUE, sep=",")
partitions <- createMultiFolds(y=data[, 1], k=nrOfFolds, 1)
fold <- partitions$Fold1.Rep1;
indexesOfInitialData <- c(1:length(data[, 1]))
factors <- c(names(data));
attributeToWorkWith <- "strength";
factors <- factors[factors != attributeToWorkWith];
factors
for (fold in partitions) {
# find indexes of test data for the first data frame taken from createMultiFolds()
testDataIndexes <- indexesOfInitialData[is.na(pmatch(indexesOfInitialData, fold))]
# Extract train data from the indexes
trainData <- data[fold, ];
# Extract test data from the indexes
testData <- data[testDataIndexes, ];
# Check for length of columns to prove everything is working properly
#length(trainData[, 1])
#length(testData[, 1])
# Generate formula from the given factors
linearModelFormula <- as.formula(paste("strength ~", paste(factors, collapse="+")));
# Create linear model from the formula and data given as data.frame
linearModel <- lm(linearModelFormula, trainData);
# print linear model
#linearModel
# Predict data based on the build linear model
predictedStrength <- predict(linearModel, testData);
# print vector of predicted strengths
#predictedStrength
# calculate the mean value for build model
meanValue <- mean(abs(predictedStrength - testData$strength));
meanValue
}
rm(list=ls())
library("caret")
setwd("/Users/vitiok/University/IS/assignment_2")
nrOfFolds <- 5
data <- read.csv(file="hormigon.csv", header=TRUE, sep=",")
partitions <- createMultiFolds(y=data[, 1], k=nrOfFolds, 1)
fold <- partitions$Fold1.Rep1;
indexesOfInitialData <- c(1:length(data[, 1]))
factors <- c(names(data));
attributeToWorkWith <- "strength";
factors <- factors[factors != attributeToWorkWith];
for (fold in partitions) {
# find indexes of test data for the first data frame taken from createMultiFolds()
testDataIndexes <- indexesOfInitialData[is.na(pmatch(indexesOfInitialData, fold))]
# Extract train data from the indexes
trainData <- data[fold, ];
# Extract test data from the indexes
testData <- data[testDataIndexes, ];
# Check for length of columns to prove everything is working properly
#length(trainData[, 1])
#length(testData[, 1])
# Generate formula from the given factors
linearModelFormula <- as.formula(paste("strength ~", paste(factors, collapse="+")));
# Create linear model from the formula and data given as data.frame
linearModel <- lm(linearModelFormula, trainData);
# print linear model
#linearModel
# Predict data based on the build linear model
predictedStrength <- predict(linearModel, testData);
# print vector of predicted strengths
#predictedStrength
# calculate the mean value for build model
meanValue <- mean(abs(predictedStrength - testData$strength));
print(meanValue)
}
rm(list=ls())
library("caret")
setwd("/Users/vitiok/University/IS/assignment_2")
nrOfFolds <- 5
data <- read.csv(file="hormigon.csv", header=TRUE, sep=",")
partitions <- createMultiFolds(y=data[, 1], k=nrOfFolds, 1)
fold <- partitions$Fold1.Rep1;
indexesOfInitialData <- c(1:length(data[, 1]))
factors <- c(names(data));
attributeToWorkWith <- "strength";
for (fold in partitions) {
# find indexes of test data for the first data frame taken from createMultiFolds()
testDataIndexes <- indexesOfInitialData[is.na(pmatch(indexesOfInitialData, fold))]
# Extract train data from the indexes
trainData <- data[fold, ];
# Extract test data from the indexes
testData <- data[testDataIndexes, ];
# Check for length of columns to prove everything is working properly
#length(trainData[, 1])
#length(testData[, 1])
# Generate formula from the given factors
linearModelFormula <- as.formula(paste("strength ~", paste(factors, collapse="+")));
# Create linear model from the formula and data given as data.frame
linearModel <- lm(linearModelFormula, trainData);
# print linear model
#linearModel
# Predict data based on the build linear model
predictedStrength <- predict(linearModel, testData);
# print vector of predicted strengths
#predictedStrength
# calculate the mean value for build model
meanValue <- mean(abs(predictedStrength - testData$strength));
print(meanValue)
}
linearModel
linearModelFormula
rm(list=ls())
library("caret")
setwd("/Users/vitiok/University/IS/assignment_2")
nrOfFolds <- 5
# read data from csv file
data <- read.csv(file="hormigon.csv", header=TRUE, sep=",")
# create k-forlds cross-validation. createMultiFolds() returns folds with vector with indexes of traing data
partitions <- createMultiFolds(y=data[, 9], k=nrOfFolds, 1)
# Start ====== Uncomment to use another function which create training data =================
#trainingData <- createFolds(y=data[, 1], k=nrOfFolds, list=TRUE, returnTrain = TRUE)
#partitions <- createDataPartition(y=data[, 1], times=1, p=0.5, list=TRUE, groups = min(5, length(data[, 1])))
# ========================================== end
# create a vector with all the indexes of the training data by taking data from the fold1 of partitions variable
fold <- partitions$Fold1.Rep1;
# create a vector with all indexes of data
indexesOfInitialData <- c(1:length(data[, 1]))
# Find variables needed for creating linear model
factors <- c(names(data));
# This variable holds the column name we want to create model upon on
attributeToWorkWith <- "strength";
# Remove strength column... To avoid worning with lm()
factors <- factors[factors != attributeToWorkWith];
# Iterate through all the folds created by createMultiFolds() function and perform:
#   1. find indexes of test set
#   2. extract data from specified indexes for train and test sets
#   3. create model
#   4. predict strength
#   5. calculate mean
for (fold in partitions) {
# find indexes of test data for the first data frame taken from createMultiFolds()
testDataIndexes <- indexesOfInitialData[is.na(pmatch(indexesOfInitialData, fold))]
# Extract train data from the indexes
trainData <- data[fold, ];
# Extract test data from the indexes
testData <- data[testDataIndexes, ];
# Check for length of columns to prove everything is working properly
#length(trainData[, 1])
#length(testData[, 1])
# Generate formula from the given factors
linearModelFormula <- as.formula(paste("strength ~", paste(factors, collapse="+")));
# Create linear model from the formula and data given as data.frame
linearModel <- lm(linearModelFormula, trainData);
# print linear model
#linearModel
# Predict data based on the build linear model
predictedStrength <- predict(linearModel, testData);
# print vector of predicted strengths
#predictedStrength
# calculate the mean value for build model
meanValue <- mean(abs(predictedStrength - testData$strength));
print(meanValue)
}
rm(list=ls())
library("caret")
library(rpart)
library(rpart.plot)
set.seed(3456)
# Sets working directory
setwd("/home/diana/Documents/activity-6")
nrOfFolds <- 5
# read data from csv file
data <- read.csv(file="churn.csv", header=TRUE, sep=",")
# remove the Phone column
data[["Phone"]] <- NULL
partitions <- createMultiFolds(y=data[, 1], k=nrOfFolds, 1)
# create a vector with all indexes of data
indexesOfInitialData <- c(1:length(data[, 1]))
# Find variables needed for creating linear model
factors <- c(names(data));
# This variable holds the column name we want to create model upon on
attributeToWorkWith <- "Churn";
# Remove strength column... To avoid worning with lm()
factors <- factors[factors != attributeToWorkWith];
formula <- as.formula(paste("Churn ~", paste(factors, collapse="+")));
print("========================= First =============================")
for (fold in partitions) {
# find indexes of test data for the first data frame taken from createMultiFolds()
testDataIndexes <- indexesOfInitialData[is.na(pmatch(indexesOfInitialData, fold))]
# Extract train data from the indexes
trainData <- data[fold, ];
# Extract test data from the indexes
testData <- data[testDataIndexes, ];
# Create decision tree model from the formula and data given as data.frame
model <- rpart(formula, trainData);
# Predict data based on the build linear model
prediction <- predict(model, testData, type="class");
# Calculate the % of hits over all the partitions
sum = sum(prediction == testData[["Churn"]])
print(sum/666)
}
print("========================= Second =============================")
minsplitVas = c(1, 50, 100);
for(j in minsplitVas) {
print(j)
# sprintf("For j = %s", j )
for (fold in partitions) {
# find indexes of test data for the first data frame taken from createMultiFolds()
testDataIndexes <- indexesOfInitialData[is.na(pmatch(indexesOfInitialData, fold))]
# Extract train data from the indexes
trainData <- data[fold, ];
# Extract test data from the indexes
testData <- data[testDataIndexes, ];
# Create decision tree model from the formula and data given as data.frame
model <- rpart(formula, trainData, minsplit=j);
# Predict data based on the build linear model
prediction <- predict(model, testData, type="class");
# Calculate the % of hits over all the partitions
sum = sum(prediction == testData[["Churn"]])
print(sum/666)
}
}
print("========================= Third =============================")
model <- rpart(formula, data);
prp(model)
rpart.plot(model)
rm(list=ls())
library("caret")
library(rpart)
library(rpart.plot)
# Sets working directory
setwd("/home/diana/Documents/activity-6")
nrOfFolds <- 5
# read data from csv file
data <- read.csv(file="churn.csv", header=TRUE, sep=",")
# remove the Phone column
data[["Phone"]] <- NULL
partitions <- createMultiFolds(y=data[, 1], k=nrOfFolds, 1)
# create a vector with all indexes of data
indexesOfInitialData <- c(1:length(data[, 1]))
# Find variables needed for creating linear model
factors <- c(names(data));
# This variable holds the column name we want to create model upon on
attributeToWorkWith <- "Churn";
# Remove strength column... To avoid worning with lm()
factors <- factors[factors != attributeToWorkWith];
formula <- as.formula(paste("Churn ~", paste(factors, collapse="+")));
print("========================= First =============================")
for (fold in partitions) {
# find indexes of test data for the first data frame taken from createMultiFolds()
testDataIndexes <- indexesOfInitialData[is.na(pmatch(indexesOfInitialData, fold))]
# Extract train data from the indexes
trainData <- data[fold, ];
# Extract test data from the indexes
testData <- data[testDataIndexes, ];
# Create decision tree model from the formula and data given as data.frame
model <- rpart(formula, trainData);
# Predict data based on the build linear model
prediction <- predict(model, testData, type="class");
# Calculate the % of hits over all the partitions
sum = sum(prediction == testData[["Churn"]])
print(sum/666)
}
print("========================= Second =============================")
minsplitVas = c(1, 50, 100);
for(j in minsplitVas) {
print(j)
# sprintf("For j = %s", j )
for (fold in partitions) {
# find indexes of test data for the first data frame taken from createMultiFolds()
testDataIndexes <- indexesOfInitialData[is.na(pmatch(indexesOfInitialData, fold))]
# Extract train data from the indexes
trainData <- data[fold, ];
# Extract test data from the indexes
testData <- data[testDataIndexes, ];
# Create decision tree model from the formula and data given as data.frame
model <- rpart(formula, trainData, minsplit=j);
# Predict data based on the build linear model
prediction <- predict(model, testData, type="class");
# Calculate the % of hits over all the partitions
sum = sum(prediction == testData[["Churn"]])
print(sum/666)
}
}
print("========================= Third =============================")
model <- rpart(formula, data);
prp(model)
rpart.plot(model)
rm(list=ls())
library("caret")
library(rpart)
library(rpart.plot)
setwd("/home/diana/Documents/activity-6")
rm(list=ls())
library("caret")
library(rpart)
library(rpart.plot)
setwd("/Users/vitiok/University/IS/decision-tree")
nrOfFolds <- 5
data <- read.csv(file="churn.csv", header=TRUE, sep=",")
data[["Phone"]] <- NULL
partitions <- createMultiFolds(y=data[, 1], k=nrOfFolds, 1)
indexesOfInitialData <- c(1:length(data[, 1]))
factors <- c(names(data));
attributeToWorkWith <- "Churn";
factors <- factors[factors != attributeToWorkWith];
formula <- as.formula(paste("Churn ~", paste(factors, collapse="+")));
print("========================= First =============================")
for (fold in partitions) {
# find indexes of test data for the first data frame taken from createMultiFolds()
testDataIndexes <- indexesOfInitialData[is.na(pmatch(indexesOfInitialData, fold))]
# Extract train data from the indexes
trainData <- data[fold, ];
# Extract test data from the indexes
testData <- data[testDataIndexes, ];
# Create decision tree model from the formula and data given as data.frame
model <- rpart(formula, trainData);
# Predict data based on the build linear model
prediction <- predict(model, testData, type="class");
# Calculate the % of hits over all the partitions
sum = sum(prediction == testData[["Churn"]])
print(sum/666)
}
print("========================= Second =============================")
minsplitVas = c(1, 50, 100);
sum = sum(prediction == testData[["Churn"]])
sum
length(testData)
length(testData[, 1])
sum
View(data)
View(data)
testData(, "Churn")
testData <- data[testDataIndexes, ];
testData(, "Churn")
rm(list=ls())
library("caret")
library(rpart)
library(rpart.plot)
setwd("/Users/vitiok/University/IS/decision-tree")
nrOfFolds <- 5
data <- read.csv(file="churn.csv", header=TRUE, sep=",")
data[["Phone"]] <- NULL
partitions <- createMultiFolds(y=data[, 1], k=nrOfFolds, 1)
indexesOfInitialData <- c(1:length(data[, 1]))
factors <- c(names(data));
attributeToWorkWith <- "Churn";
factors <- factors[factors != attributeToWorkWith];
formula <- as.formula(paste("Churn ~", paste(factors, collapse="+")));
print("========================= First =============================")
for (fold in partitions) {
# find indexes of test data for the first data frame taken from createMultiFolds()
testDataIndexes <- indexesOfInitialData[is.na(pmatch(indexesOfInitialData, fold))]
# Extract train data from the indexes
trainData <- data[fold, ];
# Extract test data from the indexes
testData <- data[testDataIndexes, ];
# Create decision tree model from the formula and data given as data.frame
model <- rpart(formula, trainData);
# Predict data based on the build linear model
prediction <- predict(model, testData, type="class");
# Calculate the % of hits over all the partitions
sum = sum(prediction == testData[["Churn"]])
print(sum/length(testData(, "Churn")))
}
testData[["Churn"]]
rm(list=ls())
library("caret")
library(rpart)
library(rpart.plot)
setwd("/Users/vitiok/University/IS/decision-tree")
nrOfFolds <- 5
data <- read.csv(file="churn.csv", header=TRUE, sep=",")
data[["Phone"]] <- NULL
partitions <- createMultiFolds(y=data[, 1], k=nrOfFolds, 1)
indexesOfInitialData <- c(1:length(data[, 1]))
factors <- c(names(data));
attributeToWorkWith <- "Churn";
factors <- factors[factors != attributeToWorkWith];
formula <- as.formula(paste("Churn ~", paste(factors, collapse="+")));
print("========================= First =============================")
for (fold in partitions) {
# find indexes of test data for the first data frame taken from createMultiFolds()
testDataIndexes <- indexesOfInitialData[is.na(pmatch(indexesOfInitialData, fold))]
# Extract train data from the indexes
trainData <- data[fold, ];
# Extract test data from the indexes
testData <- data[testDataIndexes, ];
# Create decision tree model from the formula and data given as data.frame
model <- rpart(formula, trainData);
# Predict data based on the build linear model
prediction <- predict(model, testData, type="class");
# Calculate the % of hits over all the partitions
sum = sum(prediction == testData[["Churn"]])
print(sum/length(testData[["Churn"]]))
}
sum
length(testData[["Churn"]]
)
for(j in minsplitVas){print(j)}
minsplitVas = c(1, 50, 100);
for(j in minsplitVas){print(j)}
